# ==============================================================================
# Flask Boilerplate Environment Configuration
# ==============================================================================
# Copy this file to .env and update with your actual values
# NEVER commit .env to version control - it contains sensitive information

# ==============================================================================
# APPLICATION CONFIGURATION
# ==============================================================================

# Domain where your application will be hosted
# Examples: localhost:5000, myapp.com, myapp.appspot.com
DOMAIN=localhost:5000

# Flask secret key - use a random, secure string in production
# Generate with: python -c "import secrets; print(secrets.token_hex(32))"
SECRET_KEY=your-super-secret-key-change-this-in-production

# Debug mode - Set to False in production
DEBUG=True

# Production target - determines database connection pooling and settings
# Options: gae, ubuntu_server, local (or any other for minimal resources)
PROD_TARGET=local

# Encryption key for sensitive database fields (passwords, emails, etc.)
# Generate with: python -c "import secrets; print(secrets.token_hex(32))"
ENCRYPTION_KEY=your-encryption-key-change-this-in-production

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# Database engine - MySQL/MariaDB recommended for production
# Options: mysql+pymysql, sqlite (for development only)
DB_ENGINE=mysql+pymysql

# Database credentials
DB_USERNAME=your_database_username
DB_PASS=your_database_password
DB_HOST=localhost
DB_PORT=3306
DB_NAME=your_database_name

# ==============================================================================
# DEPLOYMENT TARGET SPECIFIC EXAMPLES
# ==============================================================================

# -----------------------------------------------------------------------------
# DEVELOPMENT (Local Development)
# -----------------------------------------------------------------------------
# DEBUG=True
# PROD_TARGET=local
# DB_ENGINE=sqlite:///app.db  # Simple SQLite for local dev
# # OR for local MySQL:
# DB_ENGINE=mysql+pymysql
# DB_USERNAME=root
# DB_PASS=your_local_password
# DB_HOST=localhost
# DB_PORT=3306
# DB_NAME=flask_boilerplate_dev

# -----------------------------------------------------------------------------
# PRODUCTION - Google App Engine
# -----------------------------------------------------------------------------
# DEBUG=False
# PROD_TARGET=gae
# DOMAIN=your-app.appspot.com
# DB_ENGINE=mysql+pymysql
# DB_USERNAME=your_gae_user
# DB_PASS=your_gae_password
# DB_HOST=your-project:region:instance  # Cloud SQL connection name
# DB_NAME=your_production_db
# # Note: GAE uses unix sockets, so DB_PORT is not used

# -----------------------------------------------------------------------------
# PRODUCTION - Ubuntu Server (High Resource)
# -----------------------------------------------------------------------------
# DEBUG=False
# PROD_TARGET=ubuntu_server
# DOMAIN=your-domain.com
# DB_ENGINE=mysql+pymysql
# DB_USERNAME=your_prod_user
# DB_PASS=your_secure_prod_password
# DB_HOST=your-db-server.com
# DB_PORT=3306
# DB_NAME=your_production_db

# -----------------------------------------------------------------------------
# PRODUCTION - Limited Resources (Raspberry Pi, etc.)
# -----------------------------------------------------------------------------
# DEBUG=False
# PROD_TARGET=local  # Uses minimal connection pooling
# DOMAIN=your-pi-domain.local
# DB_ENGINE=mysql+pymysql
# DB_USERNAME=pi_user
# DB_PASS=your_pi_password
# DB_HOST=localhost
# DB_PORT=3306
# DB_NAME=your_pi_db

# ==============================================================================
# SECURITY NOTES
# ==============================================================================

# 1. SECRET_KEY: Must be unique and secure in production
#    - Generate: python -c "import secrets; print(secrets.token_hex(32))"
#    - Never use the same key across environments
#    - Keep it secret and never commit to version control

# 2. ENCRYPTION_KEY: Used for encrypting sensitive database fields
#    - Generate: python -c "import secrets; print(secrets.token_hex(32))"  
#    - Must be 32 characters (256-bit)
#    - Changing this will make existing encrypted data unreadable

# 3. DATABASE_CREDENTIALS: Use strong passwords and dedicated users
#    - Create separate database users for different environments
#    - Use principle of least privilege (only necessary permissions)
#    - Consider using connection pooling and SSL in production

# 4. DEBUG: Always set to False in production
#    - Debug mode exposes sensitive information
#    - Never run production with DEBUG=True

# ==============================================================================
# OPTIONAL ENVIRONMENT VARIABLES
# ==============================================================================

# If you add more configuration options to config.py, add them here:
# MAIL_SERVER=smtp.gmail.com
# MAIL_PORT=587
# MAIL_USE_TLS=True
# MAIL_USERNAME=your-email@gmail.com
# MAIL_PASSWORD=your-app-password

# REDIS_URL=redis://localhost:6379/0
# CELERY_BROKER_URL=redis://localhost:6379/0
# CELERY_RESULT_BACKEND=redis://localhost:6379/0

# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_S3_BUCKET=your-s3-bucket-name